name: 'EnsureUI'
description: 'Automated UI testing using natural language expectations and LLM-generated assertions'
inputs:
  deployment-url:
    description: 'URL of the deployed application'
    required: true
  github-token:
    description: 'GitHub token for authentication'
    required: true
  openai-api-key:
    description: 'OpenAI API key'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key'
    required: false
  timeout:
    description: 'Page load timeout in seconds'
    required: false
    default: '15'

outputs:
  results:
    description: 'Test results in JSON format'
    value: ${{ steps.run-tests.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Setup EnsureUI environment
      run: npm install --no-save playwright @playwright/test
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Run EnsureUI tests
      id: run-tests
      run: node ensure-ui.js
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        PROJECT_ROOT: ${{ github.workspace }}
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
        TIMEOUT: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        PR_NUMBER: ${{ github.event.number }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_RUN_ID: ${{ github.run_id }}

    - name: Debug Token Identity and Permissions
      run: |
        echo "üîç Checking token identity and permissions..."
        
        # Check who/what is authenticated with this token
        echo "üë§ Token identity:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/user | jq '{login, type, id, node_id}'
        
        # Check if it's a GitHub App installation token
        echo "ü§ñ App installation details:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/installation | jq '{id, app_id, app_slug, target_type, target_id, permissions}'
        
        # Check token scopes (for personal access tokens)
        echo "üîë Token scopes (if any):"
        curl -I -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/user | grep -i "x-oauth-scopes\|x-accepted-oauth-scopes" || echo "No OAuth scopes found (likely GitHub App token)"
        
        # Check rate limits to see what type of token this is
        echo "‚è±Ô∏è Rate limit info:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/rate_limit | jq '.resources.core'
        
        # Check specific repository permissions for this installation
        echo "üìÅ Repository-specific permissions:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/collaborators/$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" https://api.github.com/user | jq -r '.login')/permission 2>/dev/null || echo "Could not check collaborator permissions"
        
        # Alternative: Check installation permissions on this specific repo
        echo "üè¢ Installation repository permissions:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/installation/repositories | jq '.repositories[] | select(.full_name == "${{ github.repository }}") | {full_name, permissions}'
        
        # Check if we can get installation token info
        echo "üîß Token validation:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/applications/grants 2>/dev/null || echo "Not a personal access token"
             
        # Try to get the actual app details
        echo "üì± App details:"
        APP_ID=$(curl -s -H "Authorization: Bearer ${GITHUB_TOKEN}" -H "Accept: application/vnd.github.v3+json" https://api.github.com/installation | jq -r '.app_id // empty')
        if [ -n "$APP_ID" ]; then
          echo "App ID: $APP_ID"
          curl -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/apps/$APP_ID | jq '{name, slug, owner, permissions}'
        fi

      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Debug GitHub App Token
      run: |
        echo "üîç Testing GitHub App token permissions..."
        
        # Test API call to check what permissions the token actually has
        echo "üìã Checking token permissions via API:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }} | jq '.permissions // "No permissions found"'
        
        # Check if we can create a branch via API (this should work if permissions are correct)
        echo "üåø Testing branch creation via API:"
        curl -X POST \
             -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/repos/${{ github.repository }}/git/refs \
             -d '{"ref":"refs/heads/test-permissions-'"${{ github.run_id }}"'","sha":"${{ github.sha }}"}' || echo "API branch creation failed"
        
        # Check the installation ID and app permissions
        echo "üîß App installation info:"
        curl -H "Authorization: Bearer ${GITHUB_TOKEN}" \
             -H "Accept: application/vnd.github.v3+json" \
             https://api.github.com/installation/repositories | jq '.repositories[0].permissions // "No permissions found"'

      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}

    - name: Save screenshots to separate branch
      if: always() && hashFiles('screenshots/*.png') != ''
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "EnsureUI Action"

        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        
        # Fetch latest to ensure we have all refs
        echo "üîÑ Fetching latest refs..."
        git fetch origin
        
        # Get current branch name and create screenshot branch name
        CURRENT_BRANCH="${{ github.ref_name }}"
        SCREENSHOT_BRANCH="${CURRENT_BRANCH}-ensureui-${{ github.run_id }}"
        
        # Create and switch to new branch
        git checkout -b "$SCREENSHOT_BRANCH"
        
        # Add screenshots if they exist
        if [ -d "screenshots" ] && [ "$(ls -A screenshots)" ]; then
          git add screenshots/
          git commit -m "EnsureUI screenshots for run ${{ github.run_id }}
          
          ü§ñ Generated screenshots from EnsureUI testing
          
          Branch: ${{ github.ref_name }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}
          
          Screenshots are automatically saved to this temporary branch for review."
          
          # Push with explicit upstream setting
          echo "üöÄ Pushing branch..."
          git push -u origin "$SCREENSHOT_BRANCH"
          
          echo "üì∏ Screenshots saved to branch: $SCREENSHOT_BRANCH"
          echo "üîó View at: https://github.com/${{ github.repository }}/tree/$SCREENSHOT_BRANCH"
        else
          echo "No screenshots found to save"
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      working-directory: ${{ github.workspace }}
