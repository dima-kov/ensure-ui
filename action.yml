name: 'EnsureUI'
description: 'Automated UI testing using natural language expectations and LLM-generated assertions'
inputs:
  deployment-url:
    description: 'URL of the deployed application'
    required: true
  github-token:
    description: 'GitHub token for authentication'
    required: true
  openai-api-key:
    description: 'OpenAI API key'
    required: false
  anthropic-api-key:
    description: 'Anthropic API key'
    required: false
  timeout:
    description: 'Page load timeout in seconds'
    required: false
    default: '15'

outputs:
  results:
    description: 'Test results in JSON format'
    value: ${{ steps.run-tests.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Setup EnsureUI environment
      run: npm install --no-save playwright @playwright/test
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Cache Playwright browsers
      uses: actions/cache@v4
      id: playwright-cache
      with:
        path: ~/.cache/ms-playwright
        key: playwright-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
        restore-keys: |
          playwright-${{ runner.os }}-

    - name: Install Playwright browsers
      if: steps.playwright-cache.outputs.cache-hit != 'true'
      run: npx playwright install chromium
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Run EnsureUI tests
      id: run-tests
      run: node ensure-ui.js
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        PROJECT_ROOT: ${{ github.workspace }}
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
        TIMEOUT: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        ANTHROPIC_API_KEY: ${{ inputs.anthropic-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        PR_NUMBER: ${{ github.event.number }}
        GITHUB_REF_NAME: ${{ github.ref_name }}
        GITHUB_RUN_ID: ${{ github.run_id }}

    - name: Save screenshots to separate branch
      if: always() && hashFiles('screenshots/*.png') != ''
      run: |
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "EnsureUI Action"

        echo "ðŸ”„ Fetching latest refs..."
        git fetch origin

        # Get current branch name and create screenshot branch name
        CURRENT_BRANCH="${{ github.ref_name }}"
        SCREENSHOT_BRANCH="${CURRENT_BRANCH}-ensureui-${{ github.run_id }}"
        
        git checkout -b "$SCREENSHOT_BRANCH"
        
        if [ -d "screenshots" ] && [ "$(ls -A screenshots)" ]; then
          git add screenshots/
          git commit -m "EnsureUI screenshots for run ${{ github.run_id }}"
          
          echo "ðŸ¤– Generated screenshots from EnsureUI testing"

          Branch: ${{ github.ref_name }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}

          # Check if remote branch exists and delete it if so
          git push origin --delete "$SCREENSHOT_BRANCH" || echo "Branch didn't exist or already deleted"

          # Push with explicit upstream setting
          echo "ðŸš€ Pushing branch..."
          git push -u origin "$SCREENSHOT_BRANCH"

          echo "ðŸ“¸ Screenshots saved to branch: $SCREENSHOT_BRANCH"
          echo "ðŸ”— View at: https://github.com/${{ github.repository }}/tree/$SCREENSHOT_BRANCH"
        else
          echo "No screenshots found to save"
        fi
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      working-directory: ${{ github.workspace }}
