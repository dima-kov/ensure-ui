name: 'EnsureUI'
description: 'Automated UI testing using natural language expectations and LLM-generated assertions'
inputs:
  deployment-url:
    description: 'URL of the deployed application'
    required: true
  github-token:
    description: 'GitHub token for PR comments'
    required: true
  openai-api-key:
    description: 'OpenAI API key for test generation'
    required: true
  timeout:
    description: 'Page load timeout in seconds'
    required: false
    default: '15'

outputs:
  results:
    description: 'Test results in JSON format'
    value: ${{ steps.run-tests.outputs.results }}

runs:
  using: 'composite'
  steps:
    - name: Setup EnsureUI environment
      run: npm install --no-save playwright @playwright/test
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Install Playwright browsers
      run: npx playwright install chromium
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Run EnsureUI tests
      id: run-tests
      run: node ensure-ui.js
      shell: bash
      working-directory: ${{ github.action_path }}
      env:
        PROJECT_ROOT: ${{ github.workspace }}
        DEPLOYMENT_URL: ${{ inputs.deployment-url }}
        TIMEOUT: ${{ inputs.timeout }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        OPENAI_API_KEY: ${{ inputs.openai-api-key }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        GITHUB_EVENT_NAME: ${{ github.event_name }}
        GITHUB_REF: ${{ github.ref }}
        GITHUB_SHA: ${{ github.sha }}
        PR_NUMBER: ${{ github.event.number }}

    - name: Prepare individual screenshot artifacts
      if: always()
      id: prepare-screenshots
      run: |
        echo "🔍 Preparing individual screenshot artifacts..."
        screenshot_list=""
        
        for file in *.png; do
          if [ -f "$file" ]; then
            route_name=$(echo "$file" | sed 's/\.png$//' | sed 's/_/-/g' | sed 's/^-//')
            artifact_name="screenshot-$route_name"
            
            echo "📸 Found: $file -> $artifact_name"
            
            # Create individual directory for this screenshot
            mkdir -p "individual-artifacts/$artifact_name"
            cp "$file" "individual-artifacts/$artifact_name/"
            
            # Add to list for matrix
            if [ -z "$screenshot_list" ]; then
              screenshot_list="$artifact_name"
            else
              screenshot_list="$screenshot_list,$artifact_name"
            fi
          fi
        done
        
        echo "screenshot_list=$screenshot_list" >> $GITHUB_OUTPUT
        echo "📊 Prepared artifacts: $screenshot_list"
      shell: bash
      working-directory: ${{ github.action_path }}

    - name: Upload screenshot-home
      if: always() && contains(steps.prepare-screenshots.outputs.screenshot_list, 'screenshot-home')
      uses: actions/upload-artifact@v4
      with:
        name: screenshot-home
        path: ${{ github.action_path }}/individual-artifacts/screenshot-home/
        retention-days: 7
        if-no-files-found: ignore

    - name: Upload screenshot-apply
      if: always() && contains(steps.prepare-screenshots.outputs.screenshot_list, 'screenshot-apply')
      uses: actions/upload-artifact@v4
      with:
        name: screenshot-apply
        path: ${{ github.action_path }}/individual-artifacts/screenshot-apply/
        retention-days: 7
        if-no-files-found: ignore

    - name: Upload screenshot-login
      if: always() && contains(steps.prepare-screenshots.outputs.screenshot_list, 'screenshot-login')
      uses: actions/upload-artifact@v4
      with:
        name: screenshot-login
        path: ${{ github.action_path }}/individual-artifacts/screenshot-login/
        retention-days: 7
        if-no-files-found: ignore

    - name: Upload screenshot-dashboard
      if: always() && contains(steps.prepare-screenshots.outputs.screenshot_list, 'screenshot-dashboard')
      uses: actions/upload-artifact@v4
      with:
        name: screenshot-dashboard
        path: ${{ github.action_path }}/individual-artifacts/screenshot-dashboard/
        retention-days: 7
        if-no-files-found: ignore

    - name: Upload any other screenshots
      if: always()
      run: |
        # Upload any remaining screenshots that don't match the predefined ones
        for dir in individual-artifacts/screenshot-*; do
          if [ -d "$dir" ]; then
            artifact_name=$(basename "$dir")
            case "$artifact_name" in
              screenshot-home|screenshot-apply|screenshot-login|screenshot-dashboard)
                # Already handled above
                ;;
              *)
                echo "📸 Uploading additional artifact: $artifact_name"
                # For additional screenshots, we'll use a generic approach
                echo "Additional screenshot found: $artifact_name"
                echo "Manual upload needed for: $dir"
                ;;
            esac
          fi
        done
      shell: bash
      working-directory: ${{ github.action_path }}